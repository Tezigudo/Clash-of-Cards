<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body>
  <h1>Welcome back <%= name %>
  </h1>

  <button id="btn">Click me</button>
  <button id="logoutBtn">Log out</button>
  <button id="createRoom">Create room</button>

  <ul id="room_list">
    <!-- this zone id for listing all room that can join -->
  </ul>

  <span id="Testing"></span>

  <script>
    "use strict"
    const token = document.cookie.split(';').find(cookie => cookie.trim().startsWith('token=')).split('=')[1];
    const socket = io('http://localhost:3000', {
      auth: {
        token: 'Bearer' + token
      },
      extraHeaders: {
        Authorization: 'Bearer ' + token,
      },
      query: `token=${token}`
    });

    socket.on('connect', () => {
      console.log('socket connected')

      socket.emit('authenticate', {
        token: token
      })
        .on('authenticated', () => {
          console.log("authenticated");
        })
        .on('unauthorized', (error) => {
          console.log('unauthorized: ', JSON.stringify(error.data))
        })
    })


    socket.on('roomCreated', (room) => {
      const roomList = document.getElementById('room_list');
      const joinBtn = document.createElement('button');
      joinBtn.textContent = "Join";
      const item = document.createElement('li');
      item.textContent = `${room.name}: ${room.id}`
      roomList.appendChild(item);
      roomList.appendChild(joinBtn);
      joinBtn.addEventListener('click', () => {
        socket.emit('joinRoom', room.id);
      })

      console.log('roomCreated', room)
    })

    socket.on("connect_error", (err) => {
      console.log(`connect_error due to ${err.message}`);
    });


    socket.on('disconnect', (reason) => {
      console.log('disconnect', reason)
    })

    socket.on('error', (error) => {
      console.log('error: ', error)
    })



    const btn = document.getElementById('btn');

    let i = 1;

    btn.addEventListener('click', () => {
      socket.emit('test', "<%-name  %>");
    });

    socket.on("test", (playerName) => {
      var TestSpan = document.getElementById('Testing');
      var item = document.createElement('li');
      item.textContent = `${playerName}: ${i++}`
      TestSpan.appendChild(item);
    })

    const logoutBtn = document.getElementById('logoutBtn');

    logoutBtn.addEventListener('click', async (e) => {
      e.preventDefault(); // prevent the page from reloading

      const resp = await fetch('/user/logout', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },

      })

      if (!resp.ok) {
        alert(resp.body)
        window.location.reload();
      } else {
        const data = await resp.json();

        window.location.href = '/';
      }
      socket.emit('logout');
    });

    const createRoombtn = document.getElementById('createRoom');


    createRoombtn.addEventListener('click', async (e) => {
      e.preventDefault(); // prevent the page from reloading

      const resp = await fetch('/api/game/createroom', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: "<%=name %>",
          player1_id: "<%=id %>"
        })

      })

      if (!resp.ok) {
        alert("Can't create room:" + resp.status)
        window.location.reload();
      } else {
        const data = resp.json();
        console.log(data)

        window.location.href = `/${resp.roomId}`;
      }
    });

    // list of all room that can join
    fetch('/api/game/roomList')
      .then((response) => response.json())
      .then((data) => {
        const roomList = document.getElementById('room_list');
        data.forEach((room) => {
          const item = document.createElement('li');
          item.textContent = `${room.name}: ${room.id}`
          roomList.appendChild(item);
        })
      })

  </script>
</body>

</html>